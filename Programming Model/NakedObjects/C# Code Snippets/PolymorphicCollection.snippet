<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords />
      <Title>Polymorphic Collection</Title>
      <Author>Naked Objects Group</Author>
      <Description>Code to support a multiple association defined by a 'role' Interface (one with mutiple implementations)</Description>
      <HelpUrl>www.nakedobjects.net</HelpUrl>
      <Shortcut>polycoll</Shortcut>
    </Header>
    <Snippet>
      <References />
      <Imports />
      <Declarations>
        <Literal Editable="true">
          <ID>Name</ID>
          <ToolTip>The (singular) name for the collection holding the associated objects</ToolTip>
          <Default>PropertyName</Default>
          <Function>
          </Function>
        </Literal>
        <Object Editable="true">
          <ID>RoleInterface</ID>
          <ToolTip>The (Role) Interface defining the type of object to be associated				</ToolTip>
          <Default>IRole</Default>
          <Function>
          </Function>
          <Type>
          </Type>
        </Object>
        <Object Editable="true">
          <ID>ThisType</ID>
          <ToolTip>The type of the object that holds the collection being added</ToolTip>
          <Default>ThisType</Default>
          <Function>
          </Function>
          <Type>
          </Type>
        </Object>
      </Declarations>
      <Code Language="csharp" Kind="method decl" Delimiter="$"><![CDATA[
#region $Name$s Collection of type $RoleInterface$

        //TODO:  Create a type '$ThisType$$Name$Link', which can either inherit from PolymorphicLink<$RoleInterface$, $ThisType$>
      //or otherwise implement IPolymorphicLink<$RoleInterface$, $ThisType$>.

       private ICollection<$ThisType$$Name$Link> _$Name$ = new List<$ThisType$$Name$Link>();

       [Hidden]
        public virtual ICollection<$ThisType$$Name$Link> $Name$Links
        {
            get
            {
                return _$Name$;
            }
            set
            {
                _$Name$ = value;
            }
        }

        public void Add$Name$($RoleInterface$ value)
        {
            PolymorphicNavigator.AddLink<$ThisType$$Name$Link, $RoleInterface$, $ThisType$>(value, this);
        }

        public void Remove$Name$($RoleInterface$ value)
        {
            PolymorphicNavigator.RemoveLink<$ThisType$$Name$Link, $RoleInterface$, $ThisType$>(value, this);
        }
                
        /// <summary>
        /// This is an optional, derrived collection, which shows the associated objects directly.
        /// It is more convenient for the user, but each element is resolved separately, so more
        /// expensive in processing terms.  Use this pattern only on smaller collections.
        /// </summary>
        [NotPersisted]
        public ICollection<$RoleInterface$> $Name$s
        {
            get
            {
                return $Name$Links.Select(x => x.AssociatedRoleObject).ToList();
            }
        }
  #endregion]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>